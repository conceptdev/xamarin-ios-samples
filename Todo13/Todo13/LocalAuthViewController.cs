// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using LocalAuthentication;
using UIKit;

// DEMO: 1. Info.plist NSFaceIDUsageDescription
// DEMO: 2. AppDelegate to handle foreground/background switch
// DEMO: 3. LocalAuthViewController shown and works

namespace Todo11App
{
	public partial class LocalAuthViewController : UIViewController
	{
		public LocalAuthViewController (IntPtr handle) : base (handle)
		{
            View.BackgroundColor = UIColor.FromRGB(0xCF, 0xEF, 0xa7);
            HeadingLabel.Text = NSBundle.MainBundle.LocalizedString("Things To Do", ""); 
            HeadingLabel.TextColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
		}

        public NavigationController Nav { get; set; }

        LAContextReplyHandler replyHandler;
        /// <summary>String to use for display</summary>
        string BiometryType = "";



        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            // bind every time, to reflect deletion in the Detail view
            LoginLabel.Text = "";

            // NOTE: following error will occur if the Info.plist key isn't set
            //Could not create an native instance of the type 'LocalAuthentication.LAContext': the native class hasn't been loaded.
            //It is possible to ignore this condition by setting ObjCRuntime.Class.ThrowOnInitFailure to false.
            var context = new LAContext();

            var buttonText = "";
            if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out var authError1))
            { // has Biometrics (Touch or Face)
                if (UIDevice.CurrentDevice.CheckSystemVersion(11, 0))
                {
                    context.LocalizedReason = "Authorize for access to secrets"; // iOS 11
                    BiometryType = context.BiometryType == LABiometryType.TouchId ? "Touch ID" : "Face ID";
                    buttonText = $"Login with {BiometryType}";
                }
                else
                {   // no FaceID before iOS 11
                    buttonText = $"Login with Touch ID";
                }
            }
            else if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthentication, out var authError2))
            {
                buttonText = $"Login"; // with device PIN
                BiometryType = "Device PIN";
            }
            else
            {
                // Application might choose to implement a custom username/password
                buttonText = "Use unsecured";
                BiometryType = "none";
            }
            LoginButton.SetTitle(buttonText, UIControlState.Normal);
            LoginButton.TouchUpInside += AuthenticateMe;
        }

        void AuthenticateMe(object sender, EventArgs ea)
        {
            var context = new LAContext();
            NSError AuthError;
            var localizedReason = new NSString("To access secrets");

            // because LocalAuthentication APIs have been extended over time, need to check iOS version before setting some properties
            context.LocalizedFallbackTitle = "Fallback"; // iOS 8

            if (UIDevice.CurrentDevice.CheckSystemVersion(10, 0))
            {
                context.LocalizedCancelTitle = "Cancel"; // iOS 10
            }
            if (UIDevice.CurrentDevice.CheckSystemVersion(11, 0))
            {
                context.LocalizedReason = "Authorize for access to secrets"; // iOS 11
                BiometryType = context.BiometryType == LABiometryType.TouchId ? "TouchID" : "FaceID";
            }

            //Use canEvaluatePolicy method to test if device is TouchID or FaceID enabled
            //Use the LocalAuthentication Policy DeviceOwnerAuthenticationWithBiometrics
            if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, out AuthError))
            {
                Console.WriteLine("TouchID/FaceID available/enrolled");
                replyHandler = new LAContextReplyHandler((success, error) =>
                {
                    //Make sure it runs on MainThread, not in Background
                    InvokeOnMainThread(() =>
                    {
                        if (success)
                        {
                            Console.WriteLine($"You logged in with {BiometryType}!");

                            Nav.Authenticated = true;
                            DismissViewController(true, null);
                        }
                        else
                        {
                            Console.WriteLine(error.LocalizedDescription);
                            //Show fallback mechanism here
                            LoginLabel.Text = $"{BiometryType} Authentication Failed";
                            //LoginButton.Hidden = true;
                        }
                    });

                });
                //Use evaluatePolicy to start authentication operation and show the UI as an Alert view
                //Use the LocalAuthentication Policy DeviceOwnerAuthenticationWithBiometrics
                context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, localizedReason, replyHandler);
            }
            else if (context.CanEvaluatePolicy(LAPolicy.DeviceOwnerAuthentication, out AuthError))
            {
                Console.WriteLine("When TouchID/FaceID aren't available or enrolled, use the device PIN");
                replyHandler = new LAContextReplyHandler((success, error) =>
                {
                    //Make sure it runs on MainThread, not in Background
                    InvokeOnMainThread(() =>
                    {
                        if (success)
                        {
                            Console.WriteLine($"You logged in with {BiometryType}!");

                            Nav.Authenticated = true;
                            DismissViewController(true, null);
                        }
                        else
                        {
                            Console.WriteLine(error.LocalizedDescription);
                            //Show fallback mechanism here
                            LoginLabel.Text = "Device PIN Authentication Failed";
                            //LoginButton.Hidden = true;
                        }
                    });

                });
                //Use evaluatePolicy to start authentication operation and show the UI as an Alert view
                //Use the LocalAuthentication Policy DeviceOwnerAuthenticationWithBiometrics
                context.EvaluatePolicy(LAPolicy.DeviceOwnerAuthentication, localizedReason, replyHandler);
            }
            else
            {
                // User hasn't configured a PIN or any biometric auth. 
                // App may implement its own login, or choose to allow open access
                //unAuthenticatedLabel.Text = "No device auth configured";

                var okCancelAlertController = UIAlertController.Create("No authentication", "This device does't have authentication configured.", UIAlertControllerStyle.Alert);
                okCancelAlertController.AddAction(UIAlertAction.Create("Use unsecured", UIAlertActionStyle.Default, alert => DismissViewController(true, null)));
                okCancelAlertController.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, alert => Console.WriteLine("Cancel was clicked")));
                PresentViewController(okCancelAlertController, true, null);
            }
        }
	}
}
