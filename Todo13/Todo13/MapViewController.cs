// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreLocation;
using Foundation;
using MapKit;
using UIKit;

// DEMO: 1. Location usage description

namespace Todo11App
{
    public partial class MapViewController : UIViewController
    {
        public MapViewController(IntPtr handle) : base(handle)
        {
        }
        UIButton CloseButton;
        public TodoItem Todo { get; set; }

        UIGestureRecognizer longPressGestureRecognizer;
        UIGestureRecognizer tapGestureRecognizer;
        UIGestureRecognizer doubleTapGestureRecognizer;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            SetUpAnnotations();

            CloseButton = UIButton.FromType(UIButtonType.Custom);
            CloseButton.SetTitle("X", UIControlState.Normal);
            CloseButton.BackgroundColor = UIColor.Green;
            CloseButton.SizeToFit();
            CloseButton.TouchUpInside += (sender, e) => {
                Console.WriteLine("Close map");
                DismissViewController(true, null);
            };
            View.AddSubview(CloseButton);

            Map.ShowsUserLocation = true;
            Map.ShowsCompass = true;
            Map.AddGestureRecognizer((longPressGestureRecognizer = new UILongPressGestureRecognizer(OnMapLongPress)));
            doubleTapGestureRecognizer = new UITapGestureRecognizer() { NumberOfTapsRequired = 2 };

            tapGestureRecognizer = new UITapGestureRecognizer(OnMapClicked);
            tapGestureRecognizer.RequireGestureRecognizerToFail(doubleTapGestureRecognizer);
            tapGestureRecognizer.ShouldReceiveTouch = (recognizer, touch) => !(touch.View is MKAnnotationView);


            Map.AddGestureRecognizer(tapGestureRecognizer);
            Map.AddGestureRecognizer(doubleTapGestureRecognizer);


            //Map.DidUpdateUserLocation += (sender, e) => {
            //    if (Map.UserLocation != null)
            //    {
            //        CLLocationCoordinate2D coords = Map.UserLocation.Coordinate;
            //        MKCoordinateSpan span = new MKCoordinateSpan(MilesToLatitudeDegrees(2), MilesToLongitudeDegrees(2, coords.Latitude));
            //        Map.Region = new MKCoordinateRegion(coords, span);
            //    }
            //};
            if (Map.UserLocation != null)
            {
                CLLocationCoordinate2D coords = Map.UserLocation.Coordinate;
                MKCoordinateSpan span = new MKCoordinateSpan(MilesToLatitudeDegrees(2), MilesToLongitudeDegrees(2, coords.Latitude));
                Map.Region = new MKCoordinateRegion(coords, span);
            }
        }
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            if (Todo == null)
            {
                LoadData();
            }
            else
            {
                LoadData(Todo); // just the one
            }
        }
        void OnMapClicked(UITapGestureRecognizer recognizer)
        {
            if (recognizer.State != UIGestureRecognizerState.Ended) return;

            var pixelLocation = recognizer.LocationInView(Map);
            var coordinate = Map.ConvertPoint(pixelLocation, Map);
        }
        //void OnMapDoubleTap (UITapGestureRecognizer recognizer)
        //{
        //    if (recognizer.State != UIGestureRecognizerState.Ended) return;

        //    var pixelLocation = recognizer.LocationInView(Map);
        //    var coordinate = Map.ConvertPoint(pixelLocation, Map);
        //}
        void OnMapLongPress(UILongPressGestureRecognizer recognizer)
        {
            if (recognizer.State != UIGestureRecognizerState.Began) return;

            var pixelLocation = recognizer.LocationInView(Map);
            var coordinate = Map.ConvertPoint(pixelLocation, Map);

            //MapFunctions.RaiseMapLongPress(coordinate.ToPosition());
        }
        public override void ViewWillLayoutSubviews()
        {
            base.ViewWillLayoutSubviews();
            CloseButton.Layer.CornerRadius = CloseButton.Layer.Frame.Size.Width / 2;
            CloseButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            CloseButton.ClipsToBounds = true;
            //MapButton.setImage(UIImage(named: "your-image"), for: .normal)
            CloseButton.TranslatesAutoresizingMaskIntoConstraints = false;

            var safeGuide = View.SafeAreaLayoutGuide;
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                CloseButton.TrailingAnchor.ConstraintEqualTo(safeGuide.TrailingAnchor, -23),
                CloseButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                CloseButton.WidthAnchor.ConstraintEqualTo(60),
                CloseButton.HeightAnchor.ConstraintEqualTo(60)
            });
        }
	
        /// <summary>
        /// Converts miles to latitude degrees
        /// </summary>
        public double MilesToLatitudeDegrees(double miles)
        {
            double earthRadius = 3960.0;
            double radiansToDegrees = 180.0 / Math.PI;
            return (miles / earthRadius) * radiansToDegrees;
        }

        /// <summary>
        /// Converts miles to longitudinal degrees at a specified latitude
        /// </summary>
        public double MilesToLongitudeDegrees(double miles, double atLatitude)
        {
            double earthRadius = 3960.0;
            double degreesToRadians = Math.PI / 180.0;
            double radiansToDegrees = 180.0 / Math.PI;

            // derive the earth's radius at that point in latitude
            double radiusAtLatitude = earthRadius * Math.Cos(atLatitude * degreesToRadians);
            return (miles / radiusAtLatitude) * radiansToDegrees;
        }
    
    }
}
