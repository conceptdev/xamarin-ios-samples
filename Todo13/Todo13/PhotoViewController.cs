// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using UIKit;
using CoreImage;
using CoreGraphics;

namespace Todo11App
{
    public partial class PhotoViewController : UIViewController
	{
        public TodoItem Todo { get; set; }
        UIImage photo;

        ImagePickerControllerDelegate imagePickerControllerDelegate;

		public PhotoViewController (IntPtr handle) : base (handle)
		{
            View.BackgroundColor = UIColor.LightGray;
		}
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Configure UI
            CameraButton.Enabled = UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera);
            GalleryButton.Enabled = UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.SavedPhotosAlbum);
            ClassificationLabel.Text = "Choose or take a photo...";

            // Configure Behavior
            imagePickerControllerDelegate = new ImagePickerControllerDelegate();
            imagePickerControllerDelegate.ErrorOccurred += (s, e) => ShowAlert("Processing Error", e.Value);
            imagePickerControllerDelegate.MessageUpdated += (s, e) => ShowMessage(e.Value);
            imagePickerControllerDelegate.ImagePicked += (s, e) =>
            {
                photo = UIImage.FromImage(e.Value);
                InvokeOnMainThread(() => ImageView.Image = photo);
                ClassifyImageAsync(photo);
            };

            CameraButton.TouchUpInside += ShowCamera;
            GalleryButton.TouchUpInside += ShowGallery;
            CloseButton.TouchUpInside += (sender, e) =>
            {
                Console.WriteLine("Close photo");
                DismissViewController(true, null);
            };
            SaveButton.TouchUpInside += (sender, e) =>
            {
                Console.WriteLine("Save photo");
                // TODO: save photo
                Todo.Notes = String.IsNullOrWhiteSpace(observations) ? "" : observations;

                var documentsDirectory = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
                string jpgFilename = System.IO.Path.Combine(documentsDirectory, Todo.Id + ".jpg");
                var img = MaxResizeImage(photo, 600, 600);
                NSData imgData = img.AsJPEG();
                NSError err = null;
                if (imgData.Save(jpgFilename, false, out err))
                {
                    Console.WriteLine("saved as " + jpgFilename);
                    Todo.HasImage = true;
                }
                else
                {
                    Console.WriteLine("NOT saved as " + jpgFilename + " because" + err.LocalizedDescription);
                }

                AppDelegate.Current.TodoMgr.SaveTodo(Todo);

                DismissViewController(true, null);
            };

            ConfigureCoreML();
        }

        // https://forums.xamarin.com/discussion/47322/resize-images-with-same-aspect-ratio-and-quality
        // resize the image to be contained within a maximum width and height, keeping aspect ratio
        public static UIImage MaxResizeImage(UIImage sourceImage, float maxWidth, float maxHeight)
        {
            var sourceSize = sourceImage.Size;
            var maxResizeFactor = Math.Min(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height);
            if (maxResizeFactor > 1) return sourceImage;
            var width = maxResizeFactor * sourceSize.Width;
            var height = maxResizeFactor * sourceSize.Height;
            UIGraphics.BeginImageContext(new CGSize((nfloat)width, (nfloat)height));
            sourceImage.Draw(new CGRect(0, 0, (nfloat)width, (nfloat)height));
            var resultImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();

            return resultImage;
        }

        public override void ViewWillLayoutSubviews()
        {
            base.ViewWillLayoutSubviews();
            CameraButton.Layer.CornerRadius = CameraButton.Layer.Frame.Size.Width / 2;
            CameraButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            CameraButton.SetTitleColor(UIColor.FromRGB(0xCF, 0xEF, 0xa7), UIControlState.Normal); // CFEFA7 light-green
            CameraButton.ClipsToBounds = true;
            //CameraButton.setImage(UIImage(named: "your-image"), for: .normal)
            CameraButton.TranslatesAutoresizingMaskIntoConstraints = false;

            GalleryButton.Layer.CornerRadius = GalleryButton.Layer.Frame.Size.Width / 2;
            GalleryButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            GalleryButton.SetTitleColor(UIColor.FromRGB(0xCF, 0xEF, 0xa7), UIControlState.Normal); // CFEFA7 light-green
            GalleryButton.ClipsToBounds = true;
            //GalleryButton.setImage(UIImage(named: "your-image"), for: .normal)
            GalleryButton.TranslatesAutoresizingMaskIntoConstraints = false;

            CloseButton.Layer.CornerRadius = CloseButton.Layer.Frame.Size.Width / 2;
            CloseButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            CloseButton.SetTitleColor(UIColor.FromRGB(0xCF, 0xEF, 0xa7), UIControlState.Normal); // CFEFA7 light-green
            CloseButton.ClipsToBounds = true;
            //CloseButton.setImage(UIImage(named: "your-image"), for: .normal)
            CloseButton.TranslatesAutoresizingMaskIntoConstraints = false;

            SaveButton.Layer.CornerRadius = SaveButton.Layer.Frame.Size.Width / 2;
            SaveButton.BackgroundColor = UIColor.FromRGB(0x5A, 0x86, 0x22); // 5A8622 dark-green
            SaveButton.SetTitleColor(UIColor.FromRGB(0xCF, 0xEF, 0xa7), UIControlState.Normal); // CFEFA7 light-green
            SaveButton.ClipsToBounds = true;
            //SaveButton.setImage(UIImage(named: "your-image"), for: .normal)
            SaveButton.TranslatesAutoresizingMaskIntoConstraints = false;

            ClassificationLabel.TranslatesAutoresizingMaskIntoConstraints = false;

            var safeGuide = View.SafeAreaLayoutGuide;
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                CloseButton.TrailingAnchor.ConstraintEqualTo(safeGuide.TrailingAnchor, -23),
                CloseButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                CloseButton.WidthAnchor.ConstraintEqualTo(60),
                CloseButton.HeightAnchor.ConstraintEqualTo(60)
            });
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                CameraButton.TrailingAnchor.ConstraintEqualTo(CloseButton.LeadingAnchor, -23),
                CameraButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                CameraButton.WidthAnchor.ConstraintEqualTo(60),
                CameraButton.HeightAnchor.ConstraintEqualTo(60)
            });
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                GalleryButton.TrailingAnchor.ConstraintEqualTo(CameraButton.LeadingAnchor, -23),
                GalleryButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                GalleryButton.WidthAnchor.ConstraintEqualTo(60),
                GalleryButton.HeightAnchor.ConstraintEqualTo(60)
            });
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                SaveButton.TrailingAnchor.ConstraintEqualTo(GalleryButton.LeadingAnchor, -23),
                SaveButton.BottomAnchor.ConstraintEqualTo(safeGuide.BottomAnchor, -13),
                SaveButton.WidthAnchor.ConstraintEqualTo(60),
                SaveButton.HeightAnchor.ConstraintEqualTo(60)
            });

            var marginGuide = View.LayoutMarginsGuide;
            NSLayoutConstraint.ActivateConstraints(new NSLayoutConstraint[] {
                ClassificationLabel.LeadingAnchor.ConstraintEqualTo(marginGuide.LeadingAnchor),
                ClassificationLabel.TrailingAnchor.ConstraintEqualTo(marginGuide.TrailingAnchor),
                ClassificationLabel.BottomAnchor.ConstraintEqualTo(CloseButton.TopAnchor, -13),
                ClassificationLabel.HeightAnchor.ConstraintEqualTo(120)
            });
        }
       

        void ShowCamera(object sender, EventArgs e)
        {
            // Is the camera available?
            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))
            {
                // No report to user and cancel
                ShowAlert("Not Supported", "Sorry but the saved photos album is not available on this iOS device.");
                return;
            }

            // Create a picker to get the camera image
            var picker = new UIImagePickerController()
            {
                Delegate = imagePickerControllerDelegate,
                SourceType = UIImagePickerControllerSourceType.Camera,
                CameraCaptureMode = UIImagePickerControllerCameraCaptureMode.Photo
            };

            // Display the picker
            PresentViewController(picker, true, null);
        }

        void ShowGallery(object sender, EventArgs e)
        {
            // Is the camera available?
            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.SavedPhotosAlbum))
            {
                // No report to user and cancel
                ShowAlert("Not Supported", "Sorry but the camera is not available on this iOS device.");
                return;
            }

            // Create a picker to get the camera image
            var picker = new UIImagePickerController()
            {
                Delegate = imagePickerControllerDelegate,
                SourceType = UIImagePickerControllerSourceType.SavedPhotosAlbum
            };

            // Display the picker
            PresentViewController(picker, true, null);
        }
    }
    class ImagePickerControllerDelegate : UIImagePickerControllerDelegate
    {
        public event EventHandler<EventArgsT<String>> MessageUpdated = delegate { };
        public event EventHandler<EventArgsT<String>> ErrorOccurred = delegate { };
        public event EventHandler<EventArgsT<CIImage>> ImagePicked = delegate { };

        public override void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info)
        {
            // Close the picker
            picker.DismissViewController(true, null);

            MessageUpdated(this, new EventArgsT<string>("Analyzing image with CoreML..."));

            // Read Image from returned data
            var uiImage = info[UIImagePickerController.OriginalImage] as UIImage;
            if (uiImage == null)
            {
                ErrorOccurred(this, new EventArgsT<string>("Unable to read image from picker."));
                return;
            }

            // Convert to CIImage
            var ciImage = new CIImage(uiImage);
            if (ciImage == null)
            {
                ErrorOccurred(this, new EventArgsT<string>("Unable to create required CIImage from UIImage."));
                return;
            }
            var inputImage = ciImage.CreateWithOrientation(uiImage.Orientation.ToCIImageOrientation());

            ImagePicked(this, new EventArgsT<CIImage>(inputImage));

        }
    }
}
